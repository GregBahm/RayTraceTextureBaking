#include "UnityShaderVariables.cginc"

#pragma max_recursion_depth 1

// Input
RaytracingAccelerationStructure _RaytracingAccelerationStructure;
float _Zoom; //Mathf.Tan(Mathf.Deg2Rad * Camera.main.fieldOfView * 0.5f)

// Output
RWTexture2D<float4> _Output;

struct RayPayload
{
    float4 color;
};

[shader("miss")]
void MainMissShader(inout RayPayload payload : SV_RayPayload)
{
    payload.color = float4(0, 0, 0, 1);
}

[shader("raygeneration")]
void RayGen()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;

    float2 frameCoord = float2(launchIndex.x, launchDim.y - launchIndex.y - 1) + float2(0.5, 0.5);

    float2 ndcCoords = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);
    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * _Zoom;
    float aspectRatio = (float)launchDim.x / (float)launchDim.y;
    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, 1));
    // Rotate the ray from view space to world space.
    float3 rayDirection = normalize(mul((float3x3)unity_CameraToWorld, viewDirection));
    RayDesc ray;
    ray.Origin    = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin      = 0.0f;
    ray.TMax      = 1000.0f;
    RayPayload payload;
    payload.color = float4(1, 1, 1, 1);
    uint missShaderIndex = 0;
    TraceRay(_RaytracingAccelerationStructure, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);
    _Output[frameCoord] = payload.color;
}




